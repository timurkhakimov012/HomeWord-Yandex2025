name: Release

on:
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - run: npm ci
      - run: npm run lint
      - run: npm test

  release:
    needs: lint-and-test
    runs-on: self-hosted
    env:
      VERSION: ${{ github.run_number }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags

      - name: Fetch tags & determine commits
        id: get_commits
        run: |
          # 1) Подтягиваем все теги
          git fetch --tags

          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
          echo "Previous tag: $PREV_TAG"
         
          COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:'- %s')
          else
          echo "No tags found, taking all commits"
         
          COMMITS=$(git log --pretty=format:'- %s' -n 10)
          fi
      
          echo "PREV_TAG=${PREV_TAG}" >> $GITHUB_ENV
          echo "COMMITS<<EOF"         >> $GITHUB_ENV
          echo "${COMMITS}"           >> $GITHUB_ENV
          echo "EOF"                  >> $GITHUB_ENV


      - name: Create git tag on main
        shell: bash
        run: |
          git fetch origin main
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          SHA=$(git rev-parse origin/main)
          echo "Tagging commit $SHA as ${VERSION}"
          
          git tag -a "${VERSION}" "$SHA" -m "Release ${VERSION}"
          
          git push origin "${VERSION}"


      - name: Update CHANGELOG.md in main
        shell: bash
        run: |
        
          git checkout main
          git pull --ff-only origin main

        
          DATE=$(date -u +"%Y-%m-%d")
          echo "Updating changelog for version ${VERSION} on ${DATE}"

         
          if [ ! -f CHANGELOG.md ] || ! grep -q '^# Changelog' CHANGELOG.md; then
            printf "# Changelog\n\n" > CHANGELOG.md
          fi

        
          {
            echo "## ${VERSION} - ${DATE}"
            echo
            echo "${COMMITS}"
            echo
            cat CHANGELOG.md
          } > CHANGELOG.tmp

          mv CHANGELOG.tmp CHANGELOG.md
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md

          if ! git diff --cached --exit-code; then
            git commit -m "chore: update CHANGELOG for release ${VERSION}"
            git push origin main
          else
            echo "No changes in CHANGELOG.md, skipping commit"
          fi



      - name: Create Release Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version  = process.env.VERSION;
            const date     = new Date().toISOString().split('T')[0];
            const author   = context.actor;
            const prevTag  = process.env.PREV_TAG;
            const commits  = process.env.COMMITS || '*No new commits*';
            const host     = process.env.REGISTRY_HOST;
            const id       = process.env.REGISTRY_ID;
            const imageUrl = `https://${host}/${id}/app:${version}`;
          
            const body = `
              **Date:** ${date}
              **Author:** @${author}
              **Version:** ${version}
              
              **Commits since \`${prevTag}\`:**
              ${commits}
              
              **Docker image:** ${imageUrl}
              `.trim();
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              title: `Release ${version} deployed`,
              body
            });



      - name: Create release branch
        run: |
          git checkout main
          git checkout -b releases/${VERSION}
          git push origin releases/${VERSION}

      - name: Build & Push Docker images
        run: | 
            echo ${HOST}
            HOST=${REGISTRY_HOST}
            ID=${REGISTRY_ID}
            IMG=${HOST}/${ID}/app:${VERSION}
            IMG_L=${HOST}/${ID}/app:${VERSION}_latest

            
            printf "https://${HOST}" | docker-credential-yc get

            docker build -t "$IMG" .
            docker tag   "$IMG" "$IMG_L"
            docker push  "$IMG"
            docker push  "$IMG_L"

